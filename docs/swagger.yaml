definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Song:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
  models.SongListResponse:
    properties:
      songs:
        items:
          $ref: '#/definitions/models.SongResponse'
        type: array
    type: object
  models.SongResponse:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
info:
  contact: {}
paths:
  /songs:
    get:
      consumes:
      - application/json
      description: Get a list of songs with optional filtering and pagination
      parameters:
      - description: Filter by group
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of songs
          schema:
            $ref: '#/definitions/models.SongListResponse'
        "500":
          description: Failed to get songs
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a list of songs
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Add a new song to the database
      parameters:
      - description: Song data
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.Song'
      produces:
      - application/json
      responses:
        "200":
          description: Song added
          schema:
            $ref: '#/definitions/models.SongResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to add song
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add a new song
      tags:
      - songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Song deleted
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete song
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update an existing song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated song data
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.Song'
      produces:
      - application/json
      responses:
        "200":
          description: Song updated
          schema:
            $ref: '#/definitions/models.SongResponse'
        "400":
          description: Invalid request body or ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update song
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a song
      tags:
      - songs
  /songs/{id}/lyrics:
    get:
      consumes:
      - application/json
      description: Get a lyrics of song by its song's id
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lyrics of song
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "500":
          description: Failed to get lyrics of the song
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a lyrics of song
      tags:
      - songs
swagger: "2.0"
